{"version":3,"file":"static/js/291.f52b2004.chunk.js","mappings":"8KAGM,MAAOA,UACHC,EAAAA,GADVC,c,oBAGE,KAAAC,OAAS,WAyCD,KAAAC,UAAaC,GAAgBC,KAAKH,OAASE,EAC3C,KAAAE,aAAgBF,GAAgBA,EAAIG,QAAQF,KAAKH,OAAQ,GACnE,CAzCEM,IAAIC,GACF,MAAMC,EAAQC,aAAaC,QAAQP,KAAKF,UAAUM,EAAQL,MAC1D,OAAiB,OAAVM,EACHG,QAAQC,QAAQ,CACdJ,MAAOK,KAAKL,KAEdG,QAAQG,OAAO,qCACrB,CACAC,IAAIR,GAEF,OADAE,aAAaO,QAAQb,KAAKF,UAAUM,EAAQL,KAAMe,KAAKV,EAAQC,QACxDG,QAAQC,QAAQ,CAAEJ,OAAO,GAClC,CACAU,OAAOX,GACL,OAAIE,aAAaC,QAAQP,KAAKF,UAAUM,EAAQL,OAC9CO,aAAaU,WAAWhB,KAAKF,UAAUM,EAAQL,MACxCS,QAAQC,QAAQ,CAAEJ,OAAO,KAEzBG,QAAQG,OAAO,qCAE1B,CACAM,QACE,IAAK,MAAMlB,KAAOO,aACiB,IAA7BP,EAAImB,QAAQlB,KAAKH,SACnBS,aAAaU,WAAWjB,GAG5B,OAAOS,QAAQC,QAAQ,CAAEJ,OAAO,GAClC,CACAc,OACE,MAAMA,EAAOC,OAAOD,KAAKb,cACtBe,QAAOC,GAAgC,IAA3BA,EAAEJ,QAAQlB,KAAKH,UAC3B0B,IAAIvB,KAAKC,cACZ,OAAOO,QAAQC,QAAQ,CAAEJ,MAAOc,GAClC,CAEAK,cACE,OAAOhB,QAAQC,QAAQ,CAAEJ,MAAO,OAClC,E","sources":["../node_modules/capacitor-secure-storage-plugin/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type { SecureStoragePluginPlugin } from './definitions';\n\nexport class SecureStoragePluginWeb\n  extends WebPlugin\n  implements SecureStoragePluginPlugin {\n  PREFIX = 'cap_sec_';\n\n  get(options: { key: string }): Promise<{ value: string }> {\n    const value = localStorage.getItem(this.addPrefix(options.key));\n    return value !== null\n      ? Promise.resolve({\n          value: atob(value),\n        })\n      : Promise.reject('Item with given key does not exist');\n  }\n  set(options: { key: string; value: string }): Promise<{ value: boolean }> {\n    localStorage.setItem(this.addPrefix(options.key), btoa(options.value));\n    return Promise.resolve({ value: true });\n  }\n  remove(options: { key: string }): Promise<{ value: boolean }> {\n    if (localStorage.getItem(this.addPrefix(options.key))) {\n      localStorage.removeItem(this.addPrefix(options.key));\n      return Promise.resolve({ value: true });\n    } else {\n      return Promise.reject('Item with given key does not exist');\n    }\n  }\n  clear(): Promise<{ value: boolean }> {\n    for (const key in localStorage) {\n      if (key.indexOf(this.PREFIX) === 0) {\n        localStorage.removeItem(key);\n      }\n    }\n    return Promise.resolve({ value: true });\n  }\n  keys(): Promise<{ value: string[] }> {\n    const keys = Object.keys(localStorage)\n      .filter(k => k.indexOf(this.PREFIX) === 0)\n      .map(this.removePrefix);\n    return Promise.resolve({ value: keys });\n  }\n\n  getPlatform(): Promise<{ value: string }> {\n    return Promise.resolve({ value: 'web' });\n  }\n\n  private addPrefix = (key: string) => this.PREFIX + key;\n  private removePrefix = (key: string) => key.replace(this.PREFIX, '');\n}\n"],"names":["SecureStoragePluginWeb","WebPlugin","constructor","PREFIX","addPrefix","key","this","removePrefix","replace","get","options","value","localStorage","getItem","Promise","resolve","atob","reject","set","setItem","btoa","remove","removeItem","clear","indexOf","keys","Object","filter","k","map","getPlatform"],"sourceRoot":""}