{"version":3,"file":"static/js/333.98f5fd62.chunk.js","mappings":"2KAUM,MAAOA,UAAmBC,EAAAA,GAAhCC,c,oBACE,KAAAC,kBAAmB,CA0DrB,CAxDEC,aAAaC,GACX,MAAMC,EAAUC,KAAKC,iBAAwB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASI,OAC/CF,KAAKG,mBAAmBJ,EAC1B,CAEAF,mBAAmBC,GACjB,MAAMC,EAAUC,KAAKI,uBAA8B,OAAPN,QAAO,IAAPA,OAAO,EAAPA,EAASO,MACrDL,KAAKG,mBAAmBJ,EAC1B,CAEAF,cAAcC,GACZ,MAAMQ,GAAkB,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAASQ,WAAY,IACtCN,KAAKG,mBAAmB,CAACG,GAC3B,CAEAT,uBACEG,KAAKJ,kBAAmB,CAC1B,CAEAC,yBACMG,KAAKJ,kBACPI,KAAKG,mBAAmB,CAAC,IAE7B,CAEAN,qBACEG,KAAKJ,kBAAmB,CAC1B,CAEQK,mBAAuD,IAAtCC,EAAAK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAqBG,EAAAA,GAAAA,MAC5C,OAAIR,IAAUQ,EAAAA,GAAAA,OACL,CAAC,IACCR,IAAUQ,EAAAA,GAAAA,MACZ,CAAC,IAEH,CAAC,GACV,CAEQN,yBAC2C,IAAjDC,EAAAE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyBI,EAAAA,GAAAA,QAEzB,OAAIN,IAASM,EAAAA,GAAAA,QACJ,CAAC,GAAI,GAAI,GAAI,GAAI,IACfN,IAASM,EAAAA,GAAAA,MACX,CAAC,GAAI,GAAI,IAEX,CAAC,GAAI,GAAI,GAClB,CAEQR,mBAAmBJ,GACzB,IAAIa,UAAUC,QAGZ,MAAMb,KAAKc,YAAY,4CAFvBF,UAAUC,QAAQd,EAItB,E","sources":["../node_modules/@capacitor/haptics/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport { ImpactStyle, NotificationType } from './definitions';\nimport type {\n  HapticsPlugin,\n  ImpactOptions,\n  NotificationOptions,\n  VibrateOptions,\n} from './definitions';\n\nexport class HapticsWeb extends WebPlugin implements HapticsPlugin {\n  selectionStarted = false;\n\n  async impact(options?: ImpactOptions): Promise<void> {\n    const pattern = this.patternForImpact(options?.style);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async notification(options?: NotificationOptions): Promise<void> {\n    const pattern = this.patternForNotification(options?.type);\n    this.vibrateWithPattern(pattern);\n  }\n\n  async vibrate(options?: VibrateOptions): Promise<void> {\n    const duration = options?.duration || 300;\n    this.vibrateWithPattern([duration]);\n  }\n\n  async selectionStart(): Promise<void> {\n    this.selectionStarted = true;\n  }\n\n  async selectionChanged(): Promise<void> {\n    if (this.selectionStarted) {\n      this.vibrateWithPattern([70]);\n    }\n  }\n\n  async selectionEnd(): Promise<void> {\n    this.selectionStarted = false;\n  }\n\n  private patternForImpact(style: ImpactStyle = ImpactStyle.Heavy): number[] {\n    if (style === ImpactStyle.Medium) {\n      return [43];\n    } else if (style === ImpactStyle.Light) {\n      return [20];\n    }\n    return [61];\n  }\n\n  private patternForNotification(\n    type: NotificationType = NotificationType.Success,\n  ): number[] {\n    if (type === NotificationType.Warning) {\n      return [30, 40, 30, 50, 60];\n    } else if (type === NotificationType.Error) {\n      return [27, 45, 50];\n    }\n    return [35, 65, 21];\n  }\n\n  private vibrateWithPattern(pattern: number[]) {\n    if (navigator.vibrate) {\n      navigator.vibrate(pattern);\n    } else {\n      throw this.unavailable('Browser does not support the vibrate API');\n    }\n  }\n}\n"],"names":["HapticsWeb","WebPlugin","constructor","selectionStarted","async","options","pattern","this","patternForImpact","style","vibrateWithPattern","patternForNotification","type","duration","arguments","length","undefined","ImpactStyle","NotificationType","navigator","vibrate","unavailable"],"sourceRoot":""}